---
- name: Get OpenStack project ID
  os_project_id:
  when: not openstack_project_id

- name: Ensure SSH directory exists
  file:
    path: "{{ ssh_directory }}"
    state: directory
    mode: 0700

- name: Extract deploy public key
  set_fact:
    cluster_deploy_ssh_public_key: "{{ lookup('ansible.builtin.env', 'SSH_PUBLIC_KEY') }}"

- name: Create, update or delete cluster Heat stack
  block:
    # A stack update won't reconcile problems unless it knows about them
    # It doesn't know about them unless a stack check has been run
    - name: Check status of cluster Heat stack
      os_stack_check:
        name: "{{ cluster_name }}"
        auth_type: "{{ cluster_auth_type or omit }}"
        auth: "{{ cluster_auth or omit }}"
      # We don't care if the check was successful or not
      # The next step is to reconcile problems anyway
      ignore_errors: true
      when: cluster_state == 'present'

    - name: Create or update cluster Heat stack
      openstack.cloud.stack:
        name: "{{ cluster_name }}"
        auth_type: "{{ cluster_auth_type or omit }}"
        auth: "{{ cluster_auth or omit }}"
        state: "{{ cluster_state }}"
        environment: "{{ cluster_environment }}"
        template: "{{ cluster_template }}"
        parameters: "{{ cluster_parameters }}"
        tag: "{{ cluster_tag | default(omit) }}"
      register: cluster_stack
      retries: 2
      delay: 10
      until: cluster_stack is not failed

    # When updating a stack, only populate the inventory when cluster_state=present
    - name: Populate cluster inventory
      block:
        - name: Extract facts from stack outputs
          set_fact:
            cluster_node_groups: "{{ (cluster_stack.stack.outputs | selectattr('output_key', 'equalto', 'node_groups') | first).output_value }}"
            cluster_ssh_user: "{{ (cluster_stack.stack.outputs | selectattr('output_key', 'equalto', 'deploy_user') | first).output_value }}"

        - include_tasks: populate_inventory.yml
      when:
        - cluster_state == 'present'
        - cluster_populate_inventory
  when: cluster_stack_update

- name: Extract facts from existing stack
  block:
    - name: Get stack outputs
      os_stack_outputs:
        stack: "{{ cluster_name }}"
        auth_type: "{{ cluster_auth_type or omit }}"
        auth: "{{ cluster_auth or omit }}"
      # If cluster_state is not present, we don't care if this fails
      ignore_errors: "{{ cluster_state != 'present' }}"
      register: os_stack_outputs

    - block:
        - name: Extract facts from stack outputs
          set_fact:
            cluster_node_groups: "{{ openstack_stack_outputs.node_groups }}"
            cluster_ssh_user: "{{ openstack_stack_outputs.deploy_user }}"

        - include_tasks: populate_inventory.yml
      when: os_stack_outputs is succeeded
  when:
    - not cluster_stack_update
    # If not populating the inventory, there is no point in reading the stack
    - cluster_populate_inventory
