---
heat_template_version: train


description: >
  Resource for a cluster node whose root disk is a Cinder volume.


parameters:
  cluster_name:
    type: string
    label: The name of the cluster

  cluster_image:
    type: string
    label: The image to use for cluster nodes (must be CentOS 7)
    constraints:
      - custom_constraint: glance.image

  # We can't use Nova keypairs if we want more than one user to be
  # able to administer the cluster, as they are owned by a user
  cluster_ssh_public_keys:
    type: json
    label: List of SSH public keys to inject into the cluster

  cluster_group:
    type: json
    label: Dictionary of properties for the node group

  node_idx:
    type: number
    label: Node index within group

  node_ports:
    type: json
    label: List of primary port resources for all nodes in this group

  primary_ips:
    type: json
    label: List of primary IP addresses for all nodes in this group


resources:
  server_name:
    type: OS::Heat::Value
    properties:
      value:
        list_join:
          - '-'
          - - { get_param: cluster_name }
            - { get_param: [cluster_group, name] }
            # list_join requires that we convert the int to a string
            - str_replace:
                template: "%node_idx%"
                params:
                  "%node_idx%": { get_param: node_idx }

  server_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        ssh_authorized_keys: { get_param: cluster_ssh_public_keys }

  server:
    type: OS::Nova::Server
    properties:
      name: { get_attr: [server_name, value] }
      flavor: { get_param: [cluster_group, flavor] }
      flavor_update_policy: REPLACE
      networks:
        - port: { get_param: [node_ports, { get_param: node_idx }] }
      block_device_mapping_v2:
        - boot_index: 0
          image: { get_param: cluster_image }
          volume_size: { get_param: [cluster_group, root_volume_size] }
          delete_on_termination: true
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource: server_config }
      # Just ignore changes to the user data
      user_data_update_policy: IGNORE

  attached_volumes:
    type: Cluster::Node::AttachedVolumes
    properties:
      server: { get_resource: server }
      prefix: { get_attr: [server_name, value] }
      volumes:
        yaql:
          expression: $.data.get('additional_volumes', [])
          data: { get_param: cluster_group }


outputs:
  OS::stack_id:
    value: { get_resource: server }

  instance_data:
    value:
      id: { get_resource: server }
      name: { get_attr: [server_name, value] }
      ip: { get_param: [primary_ips, { get_param: node_idx }] }
      inventory_groups: { get_param: [cluster_group, inventory_groups] }
      # Include information about the volumes in the node facts
      facts:
        map_merge:
          - yaql:
              expression: $.data.get('facts', {})
              data: { get_param: cluster_group }
          - cluster_attached_volumes: { get_attr: [attached_volumes, volumes] }
