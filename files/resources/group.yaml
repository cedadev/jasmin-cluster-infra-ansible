---
heat_template_version: rocky


description: >
  Resource for a group of homogeneous cluster nodes.


parameters:
  cluster_name:
    type: string
    label: The name of the cluster

  cluster_groups:
    type: json
    label: List of dictionaries defining properties for each node group

  cluster_image:
    type: string
    label: The image to use for cluster nodes (must be CentOS 7)
    constraints:
      - custom_constraint: glance.image

  # We can't use Nova keypairs if we want more than one user to be
  # able to administer the cluster, as they are owned by a user
  cluster_ssh_public_keys:
    type: json
    label: List of SSH public keys to inject into the cluster

  cluster_network:
    type: string
    label: The network to attach cluster nodes to
    constraints:
      - custom_constraint: neutron.network

  group_idx:
    type: number
    label: The index of the group


conditions:
  root_volume:
    yaql:
      expression: $.data.containsKey('root_volume_size')
      data: { get_param: [cluster_groups, { get_param: group_idx }] }


resources:
  port_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: [cluster_groups, { get_param: group_idx }, num_nodes] }
      resource_def:
        type: { get_param: [cluster_groups, { get_param: group_idx }, nodenet_resource ] }
        properties:
          cluster_network: { get_param: cluster_network }
          cluster_group: { get_param: [cluster_groups, { get_param: group_idx }] }
          node_idx: "%index%"

  node_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: [cluster_groups, { get_param: group_idx }, num_nodes] }
      resource_def:
        type:
          if:
            - root_volume
            - "Cluster::NodeWithRootVolume"
            - "Cluster::Node"
        properties:
          node_idx: "%index%"
          cluster_name: { get_param: cluster_name }
          cluster_image: { get_param: cluster_image }
          cluster_ssh_public_keys: { get_param: cluster_ssh_public_keys }
          cluster_group: { get_param: [cluster_groups, { get_param: group_idx }] }
          node_ports: { get_attr: [port_group, refs] }
          primary_ips: { get_attr: [port_group, primary_ip] }


outputs:
  group_data:
    value:
      name: { get_param: [cluster_groups, { get_param: group_idx }, name] }
      nodes: { get_attr: [node_group, instance_data] }
