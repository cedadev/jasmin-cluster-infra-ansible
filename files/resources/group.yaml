---
heat_template_version: queens


description: >
  Resource for a group of homogeneous cluster nodes.


parameters:
  cluster_name:
    type: string
    label: The name of the cluster

  cluster_groups:
    type: json
    label: List of dictionaries defining properties for each node group

  cluster_image:
    type: string
    label: The image to use for cluster nodes (must be CentOS 7)
    constraints:
      - custom_constraint: glance.image

  cluster_user_keypair:
    type: string
    label: SSH key pair for user access to the cluster
    constraints:
      - custom_constraint: nova.keypair

  cluster_deploy_public_key:
    type: string
    label: SSH public key for deployments to the cluster

  cluster_network:
    type: string
    label: The network to attach cluster nodes to
    constraints:
      - custom_constraint: neutron.network

  group_idx:
    type: number
    label: The index of the group


resources:
  port_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: [cluster_groups, { get_param: group_idx }, num_nodes] }
      resource_def:
        type: { get_param: [cluster_groups, { get_param: group_idx }, nodenet_resource ] }
        properties:
          cluster_network: { get_param: cluster_network }
          cluster_group: { get_param: [cluster_groups, { get_param: group_idx }] }
          node_idx: "%index%"

  node_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: [cluster_groups, { get_param: group_idx }, num_nodes] }
      resource_def:
        type: Cluster::Node
        properties:
          node_idx: "%index%"
          cluster_name: { get_param: cluster_name }
          cluster_image: { get_param: cluster_image }
          cluster_user_keypair: { get_param: cluster_user_keypair }
          cluster_deploy_public_key: { get_param: cluster_deploy_public_key }
          cluster_group: { get_param: [cluster_groups, { get_param: group_idx }] }
          node_ports: { get_attr: [port_group, refs] }
          primary_ips: { get_attr: [port_group, primary_ip] }


outputs:
  group_data:
    value:
      name: { get_param: [cluster_groups, { get_param: group_idx }, name] }
      nodes: { get_attr: [node_group, instance_data] }
      info:
        str_replace:
          template: { get_param: [cluster_groups, { get_param: group_idx }, info] }
          params:
            "\"$PRIMARY_IPS\"": { get_attr: [port_group, primary_ip] }
